{
  "openapi": "3.1.0",
  "info": {
    "title": "aleonard.us API local",
    "description": "This is the API for aleonard.us",
    "contact": {
      "name": "Adam",
      "url": "https://www.aleonard.us/",
      "email": "aleonard9@hotmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local server"
    }
  ],
  "paths": {
    "/v1/auth/token": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Token",
        "description": "Retrieves a JWT token if username (email) and password match\n\nArgs:\n    username: The email of the user\n    password: The password of the user\n\nReturns:\n    Access token",
        "operationId": "get_token_v1_auth_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_get_token_v1_auth_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get All Users",
        "description": "Retrieve all users from the database. Must be an admin to view all users.\n\nArgs:\n    db (Session): The database session.\n\nReturns:\n    list[UserDisplay]: A list of users.",
        "operationId": "get_all_users_v1_users_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserDisplay"
                  },
                  "type": "array",
                  "title": "Response Get All Users V1 Users Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create User",
        "description": "Create a new user in the database.\n\nArgs:\n    request (UserBase): Must include email, display_name (max length 16 characters), and password.\n    db (Session): The database session.\n\nReturns:\n    UserDisplay: The newly created user data.",
        "operationId": "create_user_v1_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDisplay"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{uuid}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User",
        "description": "Retrieve a user by ID from the database.\nAdmins can view all users, while users can only view their own account.\n\nArgs:\n    uuid (str): The ID of the user.\n    db (Session): The database session.\n\nReturns:\n    UserDisplay: The user data.",
        "operationId": "get_user_v1_users__uuid__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDisplay"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update User",
        "description": "Update a user's information in the database.\nAdmins can update any user, while users can only update their own account.\n\nArgs:\n    uuid (str): The ID of the user.\n    request (UserBase): The updated user data.\n    db (Session): The database session.\n\nReturns:\n    UserDisplay: The updated user data.",
        "operationId": "update_user_v1_users__uuid__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDisplay"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User",
        "description": "Delete a user by ID from the database.\nAdmins can delete any user, while users can only delete their own account.\n\nArgs:\n    uuid (str): The ID of the user.\n    db (Session): The database session.\n    current_user (dict): The current authenticated user.\n\nReturns:\n    UserDisplay: The deleted user data.",
        "operationId": "delete_user_v1_users__uuid__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDisplay"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/books": {
      "get": {
        "tags": [
          "books"
        ],
        "summary": "Get all books",
        "description": "Get all books from the database",
        "operationId": "get_all_books_v1_books_get",
        "responses": {
          "200": {
            "description": "List of books",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "intro"
        ],
        "summary": "Index",
        "description": "Index endpoint that returns a welcome message.\n\nReturns:\n    str: Welcome message.",
        "operationId": "index__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutResponseModel"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_get_token_v1_auth_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_get_token_v1_auth_token_post"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "OutResponseModel": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "data": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "default": []
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "title": "OutResponseModel",
        "description": "All responses will have this format."
      },
      "UserBase": {
        "properties": {
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "display_name",
          "email",
          "password"
        ],
        "title": "UserBase",
        "description": "Schema for user input data."
      },
      "UserDisplay": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "user_group": {
            "type": "string",
            "title": "User Group"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "display_name",
          "email",
          "user_group",
          "created_at",
          "updated_at"
        ],
        "title": "UserDisplay",
        "description": "Schema for displaying user data."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "v1/auth/token"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "users",
      "description": "User operations"
    },
    {
      "name": "authentication",
      "description": "Auth operations"
    },
    {
      "name": "books",
      "description": "Book operations"
    },
    {
      "name": "intro",
      "description": "Welcome message"
    }
  ]
}
